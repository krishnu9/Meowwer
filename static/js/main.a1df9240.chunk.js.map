{"version":3,"sources":["logo.svg","mews/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MewsComponent","props","textAreaRef","React","createRef","useState","newMews","setNewMews","className","onSubmit","event","preventDefault","newVal","current","value","tempNewMews","unshift","content","likes","id","ref","required","type","MewList","mewsInit","setMewsInit","mews","setMews","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","console","log","message","send","loadMews","alert","map","mew","index","Mew","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","mewsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.a1df9240.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react';\r\nimport { loadMews } from '../lookup'\r\n\r\nexport function MewsComponent(props) {\r\n    const textAreaRef = React.createRef();\r\n    const [newMews, setNewMews] = useState([]);\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const newVal = textAreaRef.current.value\r\n        let tempNewMews = [...newMews]\r\n        tempNewMews.unshift({\r\n            content: newVal,\r\n            likes: 0,\r\n            id: 123123\r\n        })\r\n        setNewMews(tempNewMews)\r\n        textAreaRef.current.value = \"\"\r\n    }\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n        <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className=\"form-control\">\r\n            </textarea>\r\n            <button type=\"submit\" className='btn btn-primary my-3'>Mew</button>\r\n        </form>\r\n    </div>\r\n    <MewList newMews={newMews}/>\r\n    </div>\r\n}\r\n\r\nexport function MewList(props) {\r\n    const [mewsInit, setMewsInit] = useState([]);\r\n    const [mews, setMews] = useState([]);\r\n    useEffect(() => {\r\n        const final = [...props.newMews].concat(mewsInit)\r\n        if (final.length !== mews.length) {\r\n            setMews(final)\r\n        }\r\n    }, [props.newMews, mews, mewsInit])\r\n    useEffect(() => {\r\n        const mycallback = (response, status) => {\r\n            if (status === 200) {\r\n                setMewsInit(response);\r\n            } else {\r\n                alert(\"There was an error\");\r\n            }\r\n        };\r\n        loadMews(mycallback);\r\n    }, [mewsInit]);\r\n\r\n    return mews.map((mew, index) => {\r\n        return <Mew mew={mew} key={index} />;\r\n    })\r\n}\r\n\r\nexport function ActionBtn(props) {\r\n    const { mew, action } = props;\r\n    const [likes, setLikes] = useState(mew.likes ? mew.likes : 0)\r\n    const [userLike, setUserLike] = useState(mew.userLike === true ? true : false)\r\n    const className = props.className ? props.className : \"btn btn-primary btn-sm\";\r\n    const actionDisplay = action.display ? action.display : \"Action\"\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserLike(false)\r\n            } else {\r\n                setLikes(likes + 1)\r\n                setUserLike(true)\r\n            }\r\n        }\r\n    }\r\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\r\n    return <button className={className} onClick={handleClick}>{display}</button>\r\n}\r\n\r\nexport function Mew(props) {\r\n    const mew = props.mew;\r\n    const className = props.className ? props.className : \"col-10 mx-auto col-md-6\";\r\n    return (\r\n        <div className={className}>\r\n            <p>\r\n                {mew.id} - {mew.content}\r\n            </p>\r\n            <div>\r\n                <ActionBtn mew={mew} action={{ type: \"like\", display: \"likes\" }} />\r\n                <ActionBtn mew={mew} action={{ type: \"unlike\", display: \"unlike\" }} />\r\n                <ActionBtn mew={mew} action={{ type: \"remew\", display: \"remew\" }} />\r\n            </div>\r\n        </div>\r\n    );\r\n}","\r\nexport function loadMews(callback) {\r\n    const xhr = new XMLHttpRequest();\r\n    const method = \"GET\";\r\n    const url = \"http://localhost:8000/api/meowws/\";\r\n    const responseType = \"json\";\r\n    xhr.responseType = responseType;\r\n    xhr.open(method, url);\r\n    xhr.onload = function () {\r\n        callback(xhr.response, xhr.status);\r\n    };\r\n    xhr.onerror = function (e) {\r\n        console.log(e);\r\n        callback({ message: \"The request was an error\" }, 400);\r\n    };\r\n    xhr.send();\r\n}","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport {MewsComponent} from './mews'\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <MewsComponent/>\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {MewsComponent} from './mews'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n    ReactDOM.render(<App />, appEl);\n}\nconst mewsEl = document.getElementById(\"meowwer\")\nif (mewsEl) {\n    ReactDOM.render(<MewsComponent />, mewsEl);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}